components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        fullname:
          type: string
        # role:
        #   type: string
        #   enum: [user, admin]
        isEmailVerified:
          type: boolean
        walletAddress:
          type: string
        avatar:
          type: string
        coverImg:
          type: string
        createdAt:
          type: Date
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        fullname: fake name
        # role: user
        password: abc123
        isEmailVerified: false
        walletAddress: abcd123444
        avatar: abc123.jpg
        coverImg: abc123.jpg
        createdAt: 2020-05-12T16:18:04.793Z

    Collection:
      type: object
      properties:
        id:
          type: string
        contractToken:
          type: string
        userId:
          type: string
        name:
          type: string
        avatar:
          type: string
        description:
          type: string
        networkName:
          type: string
        sort:
          type: number
        status:
          type: number
        createdAt:
          type: date
        createdBy:
          type: string
        modifiedBy:
          type: string
        modified:
          type: date
      example:
        id: 5ebac534954b54139806c112
        contractToken: abc123
        userId: 5ebac534954b54139806c112
        name: Test Contract
        avatar: abc.jpg
        description: test description
        networkName: network name
        sort: 2
        status: 1
        createdAt: 2020-05-12T16:18:04.793Z
        createdBy: 5ebac534954b54139806c112
        modifiedBy: 5ebac534954b54139806c112
        modified: 2020-05-12T16:18:04.793Z

    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        slug:
          type: string
        parentId:
          type: string
        description:
          type: string
        sort:
          type: number
      example:
        id: 5ebac534954b54139806c112
        name: Meow Meow
        description: test description
        sort: 2
    ItemInCategory:
      type: object
      properties:
        id:
          type: string
        categoryId:
          type: string
        itemId:
          type: string
        createdAt:
          type: date
      example:
        id: 5ebac534954b54139806c112
        categoryId: 5ebac534954b54139806c112
        itemId: 5ebac534954b54139806c112
        createdAt: 2020-05-12T16:18:04.793Z

    OfferListing:
      type: object
      properties:
        id:
          type: string
        listingId:
          type: string
        price:
          type: number
        salePrice:
          type: number
        offerUserId:
          type: string
      example:
        id: 5ebac534954b54139806c112
        listingId: 5ebac534954b54139806c112
        price: 0.1
        salePrice: 1.0
        offerUserId: 5ebac534954b54139806c112

    UserActivity:
      type: object
      properties:
        id:
          type: string
        LogType:
          type: string
        userId:
          type: string
        device:
          type: string
        ipAddress:
          type: string
        createdAt:
          type: date
      example:
        id: 5ebac534954b54139806c112
        userId: 5ebac534954b54139806c112
        device: IPhone 12 Pro Max
        ipAddress: 127.0.0.1
        LogType: login
        createdAt: 2020-05-12T16:18:04.793Z

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    DuplicateAddressWallet:
      description: AddressWallet already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: AddressWallet already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
